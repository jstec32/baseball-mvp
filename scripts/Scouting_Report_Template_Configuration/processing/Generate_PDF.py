import os
from pathlib import Path
from fpdf import FPDF
from matplotlib import pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import psycopg2
import seaborn as sns
from io import BytesIO
from fpdf.enums import XPos, YPos
from scripts.Database_Configuration.visualization_config import  apply_global_styles

# Import your individual Python scripts
from scripts.Scouting_Report_Template_Configuration.processing.Hitter_Season_Stats import generate_hitter_season_stats_visual
from scripts.Scouting_Report_Template_Configuration.processing.Hitter_Splits_Against_Pitcher_Arsenal import generate_hitter_splits_visual
from scripts.Scouting_Report_Template_Configuration.processing.Pitch_Arsenal_Visualization import generate_pitch_arsenal_visual
from scripts.Scouting_Report_Template_Configuration.processing.Pitcher_Heatmap import generate_pitcher_heatmap_visual
from scripts.Scouting_Report_Template_Configuration.processing.Season_Stats_Pitcher_Viz import generate_season_stats_viz

# Database configuration
DB_CONFIG = {
    "host": "aws-0-us-east-2.pooler.supabase.com",
    "database": "postgres",
    "user": "postgres.chcovbrcpmlxyauansqe",
    "password": "1Z4IO6fxxYw8PgxL",  # Replace with your Supabase password
    "port": 5432
}

def figure_to_image(fig):

    buf = BytesIO()
    fig.savefig(buf, format='png', bbox_inches='tight', pad_inches=0)
    buf.seek(0)
    return buf

def fetch_player_name(player_id):
    query = """
    SELECT CONCAT("First_Name", ' ', "Last_Name") AS player_name
    FROM players
    WHERE key_mlbam = %s;
    """
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(query, (player_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        print(f"Error fetching player name: {e}")
        return None

def create_title_page(hitter_name, pitcher_name):
    fig, ax = plt.subplots(figsize=(8.5, 11))
    ax.axis('off')
    title = f"Scouting Report: {hitter_name} vs. {pitcher_name}"
    ax.text(0.5, 0.7, title, fontsize=24, ha='center', va='center', wrap=True)
    ax.text(0.5, 0.5, "Generated by Baseball MVP System", fontsize=14, ha='center', va='center', alpha=0.7)
    return fig


def generate_scouting_report(hitter_name, pitcher_name, visuals, pdf_path):
    """
    Generate the scouting report PDF that fits all content on one page.
    """
    pdf = FPDF()
    pdf.set_auto_page_break(auto=False)  # Disable automatic page breaks
    pdf.add_page()

    # Layout settings
    page_width = 190  # Width of the page
    page_height = 277  # Height of the page (A4 page minus margins)
    margin = 10  # Margin around the page
    content_height = page_height - (2 * margin)  # Height available for content
    row_height = content_height / 4  # Divide into four rows

    # Title at the top
    pdf.set_font("Helvetica", "B", 16)
    pdf.cell(page_width, 10, text=f"Scouting Report: {hitter_name} vs. {pitcher_name}", align='C', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    pdf.ln(5)

    # --- Row 1: Pitcher Season Stats (Full Width) ---
    pdf.set_font("Helvetica", "B", 12)
    pdf.cell(page_width, 10, text="Pitcher Season Stats", align='C', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    pdf.image(figure_to_image(visuals["Pitcher Season Stats"]), x=margin, y=pdf.get_y(), w=page_width - (2 * margin), h=row_height - 15)
    pdf.ln(row_height - 15)

    # --- Row 2: Pitch Usage Rate (Left) and Hitter Splits (Right) ---
    pdf.cell(page_width / 2, 10, text="Pitch Usage Rate", align='C', new_x=XPos.RIGHT, new_y=YPos.TOP)
    pdf.cell(page_width / 2, 10, text="Hitter Splits Against Arsenal", align='C', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    y_pos = pdf.get_y()
    pdf.image(figure_to_image(visuals["Pitcher Arsenal"]), x=margin, y=y_pos, w=(page_width / 2) - margin, h=row_height - 15)
    pdf.image(figure_to_image(visuals["Hitter Splits Against Arsenal"]), x=(page_width / 2) + margin / 2, y=y_pos, w=(page_width / 2) - margin, h=row_height - 15)
    pdf.ln(row_height - 15)

    # --- Row 3: Hitter Season Stats (Left) and Recommendations (Right) ---
    pdf.cell(page_width / 2, 10, text="Hitter Season Stats", align='C', new_x=XPos.RIGHT, new_y=YPos.TOP)
    pdf.cell(page_width / 2, 10, text="Recommendations", align='C', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    y_pos = pdf.get_y()
    pdf.image(figure_to_image(visuals["Hitter Season Stats"]), x=margin, y=y_pos, w=(page_width / 2) - margin, h=row_height - 15)
    pdf.set_xy((page_width / 2) + margin / 2, y_pos)
    pdf.set_font("Helvetica", size=10)
    pdf.multi_cell((page_width / 2) - margin, 10, text="Recommendations go here.\n(Generated by model).", border=1, align='L')
    pdf.ln(row_height - 15)

    # --- Row 4: Combined Heatmap (Full Width) ---
    pdf.cell(page_width, 10, text="Combined Pitcher and Hitter Heatmap", align='C', new_x=XPos.LMARGIN, new_y=YPos.NEXT)
    pdf.image(figure_to_image(visuals["Pitcher Heatmap"]), x=margin, y=pdf.get_y(), w=page_width - (2 * margin), h=row_height - 15)

    # Save the PDF
    pdf.output(pdf_path)
    print(f"Scouting report saved to: {pdf_path}")




def run_pdf_generation(hitter_id, pitcher_id):
    print("Generating scouting report...")

    hitter_name = fetch_player_name(hitter_id)
    pitcher_name = fetch_player_name(pitcher_id)

    if not hitter_name or not pitcher_name:
        print(f"Failed to fetch names for Hitter ID: {hitter_id} or Pitcher ID: {pitcher_id}")
        return

    print(f"Hitter: {hitter_name}, Pitcher: {pitcher_name}")

    # Generate visuals
    hitter_visuals = generate_hitter_season_stats_visual(hitter_id)
    hitter_splits_visuals = generate_hitter_splits_visual(pitcher_id, hitter_id)
    pitcher_arsenal_visuals = generate_pitch_arsenal_visual(pitcher_id)
    pitcher_heatmap_visuals = generate_pitcher_heatmap_visual(pitcher_id, hitter_id)
    pitcher_season_stats_visual = generate_season_stats_viz(pitcher_id)

    if not all([hitter_visuals, hitter_splits_visuals, pitcher_arsenal_visuals, pitcher_heatmap_visuals]):
        print("Failed to generate one or more visuals.")
        return

    visuals = {
        "Hitter Season Stats": hitter_visuals["hitter_stats_fig"],
        "Pitcher Season Stats": pitcher_season_stats_visual,
        "Hitter Splits Against Arsenal": hitter_splits_visuals["hitter_splits_table"],
        "Pitcher Arsenal": pitcher_arsenal_visuals["usage_rate"],
        "Pitcher Heatmap": pitcher_heatmap_visuals,  # Dictionary of heatmaps per pitch type
    }

    pdf_path = "/Users/joshsteckler/PycharmProjects/baseball-mvp/scouting_reports/scouting_report.pdf"
    generate_scouting_report(hitter_name, pitcher_name, visuals, pdf_path)
    print("Scouting report generation complete.")

if __name__ == "__main__":
    hitter_id = input("Enter Hitter ID: ")
    pitcher_id = input("Enter Pitcher ID: ")
    run_pdf_generation(hitter_id, pitcher_id)