import os
from pathlib import Path
from fpdf import FPDF
from matplotlib import pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import psycopg2
import seaborn as sns

# Import your individual Python scripts
from scripts.Scouting_Report_Template_Configuration.processing.Hitter_Season_Stats import generate_hitter_season_stats_visual
from scripts.Scouting_Report_Template_Configuration.processing.Hitter_Splits_Against_Pitcher_Arsenal import generate_hitter_splits_visual
from scripts.Scouting_Report_Template_Configuration.processing.Pitch_Arsenal_Visualization import generate_pitch_arsenal_visual
from scripts.Scouting_Report_Template_Configuration.processing.Pitcher_Heatmap import generate_pitcher_heatmap_visual
from scripts.Scouting_Report_Template_Configuration.processing.Season_Stats_Pitcher_Viz import generate_season_stats_viz

# Database configuration
DB_CONFIG = {
    "host": "aws-0-us-east-2.pooler.supabase.com",
    "database": "postgres",
    "user": "postgres.chcovbrcpmlxyauansqe",
    "password": "1Z4IO6fxxYw8PgxL",  # Replace with your Supabase password
    "port": 5432
}

def fetch_player_name(player_id):
    query = """
    SELECT CONCAT("First_Name", ' ', "Last_Name") AS player_name
    FROM players
    WHERE key_mlbam = %s;
    """
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        cursor.execute(query, (player_id,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        print(f"Error fetching player name: {e}")
        return None

def create_title_page(hitter_name, pitcher_name):
    fig, ax = plt.subplots(figsize=(8.5, 11))
    ax.axis('off')
    title = f"Scouting Report: {hitter_name} vs. {pitcher_name}"
    ax.text(0.5, 0.6, title, fontsize=24, ha='center', va='center', wrap=True)
    ax.text(0.5, 0.4, "Generated by Baseball MVP System", fontsize=14, ha='center', va='center', alpha=0.7)
    return fig

def generate_one_page_pdf(hitter_name, pitcher_name, visuals, pdf_path):
    fig, axs = plt.subplots(3, 2, figsize=(12, 18))  # Grid layout: 3 rows x 2 columns
    fig.suptitle(f"Scouting Report: {hitter_name} vs. {pitcher_name}", fontsize=18)

    axes = axs.ravel()  # Flatten the grid for easy access

    for idx, (section_title, visual) in enumerate(visuals.items()):
        if idx >= len(axes):  # Skip extra visuals if they exceed the grid
            print(f"Skipping {section_title} due to space constraints.")
            break
        ax = axes[idx]

        # Handle heatmaps by pitch type separately
        if isinstance(visual, dict):  # For heatmaps per pitch type
            for pitch_type, heatmap_fig in visual.items():
                heatmap_fig.canvas.draw()  # Ensure the figure is updated
                ax.imshow(heatmap_fig.canvas.buffer_rgba())
                ax.set_title(f"{section_title}: {pitch_type}", fontsize=10)
                ax.axis('off')
        else:
            visual.canvas.draw()  # Ensure the figure is updated
            ax.imshow(visual.canvas.buffer_rgba())
            ax.set_title(section_title, fontsize=10)
            ax.axis('off')

    # Hide unused axes
    for ax in axes[len(visuals):]:
        ax.axis('off')

    plt.tight_layout()
    plt.savefig(pdf_path, bbox_inches='tight')
    print(f"Scouting report saved to: {pdf_path}")


def run_pdf_generation(hitter_id, pitcher_id):
    print("Generating scouting report...")

    hitter_name = fetch_player_name(hitter_id)
    pitcher_name = fetch_player_name(pitcher_id)

    if not hitter_name or not pitcher_name:
        print(f"Failed to fetch names for Hitter ID: {hitter_id} or Pitcher ID: {pitcher_id}")
        return

    print(f"Hitter: {hitter_name}, Pitcher: {pitcher_name}")

    hitter_visuals = generate_hitter_season_stats_visual(hitter_id)
    hitter_splits_visuals = generate_hitter_splits_visual(pitcher_id, hitter_id)
    pitcher_arsenal_visuals = generate_pitch_arsenal_visual(pitcher_id)
    pitcher_heatmap_visuals = generate_pitcher_heatmap_visual(pitcher_id, hitter_id)
    pitcher_season_stats_visual = generate_season_stats_viz(pitcher_id)

    if not all([hitter_visuals, hitter_splits_visuals, pitcher_arsenal_visuals, pitcher_heatmap_visuals]):
        print("Failed to generate one or more visuals.")
        return

    visuals = {
        "Hitter Season Stats": hitter_visuals["hitter_stats_fig"],
        "Hitter Splits Against Arsenal": hitter_splits_visuals["hitter_splits_table"],
        "Pitcher Arsenal": pitcher_arsenal_visuals["usage_rate"],
        "Pitcher Heatmap": pitcher_heatmap_visuals,  # Dictionary of heatmaps per pitch type
        "Pitcher Season Stats": pitcher_season_stats_visual,
    }

    pdf_path = "/Users/joshsteckler/PycharmProjects/baseball-mvp/scouting_reports/scouting_report.pdf"
    generate_one_page_pdf(hitter_name, pitcher_name, visuals, pdf_path)
    print("Scouting report generation complete.")



if __name__ == "__main__":
    hitter_id = input("Enter Hitter ID: ")
    pitcher_id = input("Enter Pitcher ID: ")
    run_pdf_generation(hitter_id, pitcher_id)